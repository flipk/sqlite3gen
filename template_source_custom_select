/* -*- Mode:c++; eval:(c-set-style "BSD"); c-basic-offset:4; indent-tabs-mode:nil; tab-width:8 -*- */

________ QUERY_CLASS_IMPL

SQL_SELECT_@@queryname@@ :: SQL_SELECT_@@queryname@@(sqlite3 *_pdb /*= NULL*/)
{
    pStmt_get_query = NULL;
    pdb = _pdb;
}

SQL_SELECT_@@queryname@@ :: ~SQL_SELECT_@@queryname@@(void)
{
    if (pStmt_get_query != NULL)
        sqlite3_finalize(pStmt_get_query);
}

//static
void SQL_SELECT_@@queryname@@ :: get_column_descriptors(
    std::vector<SQL_Column_Descriptor> &columns)
{
    SQL_Column_Descriptor desc;
    columns.clear();
@@column_descriptors@@
}

void
SQL_SELECT_@@queryname@@ :: set_db(sqlite3 *_pdb)
{
    if (pStmt_get_query != NULL)
        sqlite3_finalize(pStmt_get_query);
    pStmt_get_query = NULL;
    pdb = _pdb;
}

bool
SQL_SELECT_@@queryname@@ :: get_columns(void)
{
    int got;
    sqlite3_stmt * pStmt = pStmt_get_query;
    if (log_row_func)
        log_row_msg.str("@@queryname@@: ");

@@get_columns@@

    if (log_row_func)
    {
        log_row_func(log_arg, log_row_msg.str());
        log_row_msg.str("");
    }

    return true;
}

@@field_tostring_funcs@@

std::string
SQL_SELECT_@@queryname@@ :: toString(void)
{
    std::ostringstream out;
@@tostring_fields@@
    return out.str();
}

bool
SQL_SELECT_@@queryname@@ :: get(@@queryargs@@)
{
    int r;
    bool ret = false;

    if (pdb == NULL)
        return false;

    if (pStmt_get_query == NULL)
    {
        r = sqlite3_prepare_v2(
            pdb,
            "SELECT @@queryfields@@ "
            "@@querybody@@",
            -1, &pStmt_get_query, NULL);
        if (r != SQLITE_OK)
        {
            const char *msg = sqlite3_errmsg(pdb);
            PRINT_ERR("ERROR %d (%s) preparing SELECT", r, msg);
            return false;
        }
    }

    sqlite3_reset(pStmt_get_query);

@@querybinders@@

    if (log_get_func)
        log_get_func(log_arg, pStmt_get_query);

    r = sqlite3_step(pStmt_get_query);
    if (r == SQLITE_ROW)
        ret = get_columns();

    return ret;
}

bool
SQL_SELECT_@@queryname@@ :: get_next(void)
{
    int r;
    bool ret = false;

    if (pdb == NULL || pStmt_get_query == NULL)
        return false;

    r = sqlite3_step(pStmt_get_query);
    if (r == SQLITE_ROW)
        ret = get_columns();

    return ret;
}
________ END

________ QUERY_field_pod_tostring_func
std::string
SQL_SELECT_@@queryname@@ :: @@tablename@@_@@fieldname@@_toString(void)
{
    std::ostringstream out;
    out << @@tablename@@_@@fieldname@@;
    return out.str();
}
________ END

________ QUERY_field_text_tostring_func
std::string
SQL_SELECT_@@queryname@@ :: @@tablename@@_@@fieldname@@_toString(void)
{
    std::ostringstream out;
    out << "\"" << @@tablename@@_@@fieldname@@ << "\"";
    return out.str();
}
________ END

________ QUERY_field_blob_tostring_func
std::string
SQL_SELECT_@@queryname@@ :: @@tablename@@_@@fieldname@@_toString(void)
{
    std::ostringstream out;
    out << "BLOB:";
    for (size_t ind = 0; ind < @@tablename@@_@@fieldname@@.size(); ind++)
    {
        uint8_t b = (uint8_t) @@tablename@@_@@fieldname@@[ind];
        out << std::hex << std::setw(2) << (int) b;
    }
    return out.str();
}
________ END

________ QUERY_field_bool_tostring_func
std::string
SQL_SELECT_@@queryname@@ :: @@tablename@@_@@fieldname@@_toString(void)
{
    return @@tablename@@_@@fieldname@@ ? "true" : "false";
}
________ END

________ QUERY_field_enum_tostring_func
std::string
SQL_SELECT_@@queryname@@ :: @@tablename@@_@@fieldname@@_toString(void)
{
    return @@fieldtype@@_Name(@@tablename@@_@@fieldname@@);
}
________ END

________ QUERY_tostring_field
    out << "@@tablename@@_@@fieldname@@: "
        << @@tablename@@_@@fieldname@@_toString() << "; ";
________ END
