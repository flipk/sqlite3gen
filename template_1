/* -*- Mode:c++; eval:(c-set-style "BSD"); c-basic-offset:4; indent-tabs-mode:nil; tab-width:8 -*- */

________ HEADER_TOP

///////////////////////////////////////////////////////////
// NOTE // NOTE // NOTE // NOTE // NOTE // NOTE // NOTE  //
//                                                       //
//       THIS FILE IS AUTOGENERATED BY sqlite3gen        //
// DO NOT EDIT THIS FILE, EDIT THE SOURCE AND REGENERATE //
//                                                       //
// NOTE // NOTE // NOTE // NOTE // NOTE // NOTE // NOTE  //
///////////////////////////////////////////////////////////

#include <inttypes.h>
#include <string>
#include "sqlite3.h"

________ END

________ TABLE_CLASS_DEFN

class SQL_TABLE_@@tablename@@ {
    sqlite3_stmt * pStmt_insert;
    sqlite3_stmt * pStmt_update;
    sqlite3_stmt * pStmt_delete_rowid;
@@stmt_by_decls@@
@@stmt_by_decls_like@@
@@stmt_custom_get_decls@@
@@stmt_custom_upd_decls@@
@@stmt_custom_del_decls@@

protected:
    sqlite3 *pdb;
    bool debug;
    sqlite3_stmt * previous_get;
    bool get_columns(sqlite3_stmt *pStmt);

public:
    SQL_TABLE_@@tablename@@(sqlite3 *_pdb, bool _debug = false);
    virtual ~SQL_TABLE_@@tablename@@(void);

    sqlite3_int64 rowid;

@@table_field_type_name_decls@@
@@table_query_method_protos@@
@@table_query_like_method_protos@@
@@table_custom_get_method_protos@@
    bool get_next(void);
    bool insert(void); // updates rowid
    bool update(void);
    bool delete_rowid(void); // delete by rowid
@@table_custom_upd_method_protos@@
@@table_custom_del_method_protos@@

    static bool table_create(sqlite3 *pdb);
};

________ END

________ TABLE_CLASS_stmt_by_decl
    sqlite3_stmt * pStmt_by_@@fieldname@@;
________ END

________ TABLE_CLASS_stmt_by_decl_like
    sqlite3_stmt * pStmt_by_@@fieldname@@_like;
________ END

________ TABLE_CLASS_stmt_custom_get_decl
    sqlite3_stmt * pStmt_get_@@customname@@;
________ END

________ TABLE_CLASS_stmt_custom_upd_decl
    sqlite3_stmt * pStmt_update_@@customname@@;
________ END

________ TABLE_CLASS_stmt_custom_del_decl
    sqlite3_stmt * pStmt_del_@@customname@@;
________ END

________ TABLE_CLASS_table_field_type_name_decls
    @@fieldtype@@ @@fieldname@@;
________ END

________ TABLE_CLASS_table_query_method_protos
    bool get_by_@@fieldname@@(@@fieldtype@@ v);
________ END

________ TABLE_CLASS_table_query_method_protos_like
    bool get_by_@@fieldname@@_like(const std::string &patt);
________ END

________ TABLE_CLASS_table_custom_get_method_protos
    bool get_@@customname@@(@@type_and_vX@@);
________ END

________ TABLE_CLASS_table_custom_upd_method_protos
    bool update_@@customname@@(void);
________ END

________ TABLE_CLASS_table_custom_del_method_protos
    bool delete_@@customname@@(@@type_and_vX@@);
________ END

________ CLASS_ALL_TABELS_DEFN

class SQL_TABLE_ALL_TABLES {
public:
    static bool table_create_all(sqlite3 *pdb);
};

________ END

________ SOURCE_TOP

///////////////////////////////////////////////////////////
// NOTE // NOTE // NOTE // NOTE // NOTE // NOTE // NOTE  //
//                                                       //
//       THIS FILE IS AUTOGENERATED BY sqlite3gen        //
// DO NOT EDIT THIS FILE, EDIT THE SOURCE AND REGENERATE //
//                                                       //
// NOTE // NOTE // NOTE // NOTE // NOTE // NOTE // NOTE  //
///////////////////////////////////////////////////////////

#include "sample.h"
#include <string.h>
#include <stdio.h>

________ END

________ TABLE_CLASS_IMPL

SQL_TABLE_@@tablename@@ :: SQL_TABLE_@@tablename@@(sqlite3 *_pdb, bool _debug)
    : pdb(_pdb), debug(_debug)
{
    int r;

    pStmt_insert = NULL;
    pStmt_update = NULL;
    pStmt_delete_rowid = NULL;

@@prepare_queries@@
@@prepare_like_queries@@
@@prepare_custom_get_queries@@
@@prepare_custom_upd@@
@@prepare_custom_del@@

    previous_get = NULL;
}

SQL_TABLE_@@tablename@@ :: ~SQL_TABLE_@@tablename@@(void)
{
    if (pStmt_insert)
        sqlite3_finalize(pStmt_insert);
    if (pStmt_update)
        sqlite3_finalize(pStmt_update);
    if (pStmt_delete_rowid)
        sqlite3_finalize(pStmt_delete_rowid);

@@finalize_queries@@
@@finalize_like_queries@@
@@finalize_custom_get_queries@@
@@finalize_custom_upd@@
@@finalize_custom_del@@

}

bool SQL_TABLE_@@tablename@@ :: get_columns(sqlite3_stmt * pStmt)
{
    int got, want;

    rowid = sqlite3_column_int64(pStmt, 0);

@@get_columns@@

    return true;
}

@@query_implementations@@
@@query_like_implementations@@

bool SQL_TABLE_@@tablename@@ :: get_next(void)
{
    int r;
    bool ret = false;

    if (previous_get == NULL)
        return false;

    r = sqlite3_step(previous_get);
    if (r == SQLITE_ROW)
        ret = get_columns(previous_get);
    else if (r == SQLITE_DONE)
        previous_get = NULL;

    return ret;
}

bool SQL_TABLE_@@tablename@@ :: insert(void)
{
    int r;

    if (pStmt_insert == NULL)
    {
        r = sqlite3_prepare_v2(
            pdb, "INSERT INTO @@tablename@@ "
            "(@@fieldnames@@) "
            "values (@@questionmarks@@)",
            -1, &pStmt_insert, NULL);
        if (r != SQLITE_OK)
            printf("ERROR building INSERT at line %d\n", __LINE__);
    }
    sqlite3_reset(pStmt_insert);

@@insert_binders@@

    if (debug)
    {
        char * sql = sqlite3_expanded_sql(pStmt_insert);
        printf("INSERT: %s\n", sql);
        sqlite3_free(sql);
    }

    r = sqlite3_step(pStmt_insert);
    if (r != SQLITE_DONE)
    {
        fprintf(stderr, "SQL_TABLE_@@tablename@@ :: insert: r = %d\n", r);
        return false;
    }

    rowid = sqlite3_last_insert_rowid(pdb);

    return true;
}

bool SQL_TABLE_@@tablename@@ :: update(void)
{
    int r;

    if (pStmt_update == NULL)
    {
        r = sqlite3_prepare_v2(
            pdb, "UPDATE @@tablename@@ SET "
            "(@@fieldnames@@) "
            "= (@@questionmarks@@) WHERE rowid = ?",
            -1, &pStmt_update, NULL);
        if (r != SQLITE_OK)
            printf("ERROR building UPDATE at line %d\n", __LINE__);
    }

    sqlite3_reset(pStmt_update);

@@insert_binders@@

    r = sqlite3_bind_int64(pStmt_update,
                           @@column_index@@, rowid);

    if (debug)
    {
        char * sql = sqlite3_expanded_sql(pStmt_update);
        printf("UPDATE: %s\n", sql);
        sqlite3_free(sql);
    }

    r = sqlite3_step(pStmt_update);
    if (r != SQLITE_DONE)
    {
        fprintf(stderr, "SQL_TABLE_@@tablename@@ :: update: r = %d\n", r);
        return false;
    }

    return true;
}

bool SQL_TABLE_@@tablename@@ :: delete_rowid(void)
{
    int r;

    if (pStmt_delete_rowid == NULL)
    {
        r = sqlite3_prepare_v2(
            pdb, "DELETE FROM @@tablename@@ WHERE rowid = ?",
            -1, &pStmt_delete_rowid, NULL);
        if (r != SQLITE_OK)
            printf("ERROR building UPDATE at line %d\n", __LINE__);
    }

    sqlite3_reset(pStmt_delete_rowid);

    r = sqlite3_bind_int64(pStmt_delete_rowid,
                           1, rowid);

    if (debug)
    {
        char * sql = sqlite3_expanded_sql(pStmt_delete_rowid);
        printf("DELETE: %s\n", sql);
        sqlite3_free(sql);
    }

    r = sqlite3_step(pStmt_delete_rowid);
    if (r != SQLITE_DONE)
    {
        fprintf(stderr, "SQL_TABLE_@@tablename@@ :: "
                "delete_rowid: r = %d\n", r);
        return false;
    }

    return true;
}

@@custom_get_implementations@@
@@custom_upd_implementations@@
@@custom_del_implementations@@

//static
bool SQL_TABLE_@@tablename@@ :: table_create(sqlite3 *pdb)
{
    sqlite3_exec(pdb, "CREATE TABLE @@tablename@@ "
        "(userid int64, firstname string, lastname string, mi string, ssn integer, balance double, proto blob)",
        NULL, NULL, NULL);

@@index_creation@@

    return true;
}
________ END

________ TABLE_prepare_query
    pStmt_by_@@fieldname@@ = NULL;
________ END

________ TABLE_prepare_like_query
    pStmt_by_@@fieldname@@_like = NULL;
________ END

________ TABLE_prepare_custom_get_query
    pStmt_get_@@customname@@ = NULL;
________ END

________ TABLE_prepare_custom_upd
    pStmt_update_@@customname@@ = NULL;
________ END

________ TABLE_prepare_custom_del
    pStmt_del_@@customname@@ = NULL;
________ END

________ TABLE_finalize_query
    if (pStmt_by_@@fieldname@@)
        sqlite3_finalize(pStmt_by_@@fieldname@@);
________ END

________ TABLE_finalize_like_query
    if (pStmt_by_@@fieldname@@_like)
        sqlite3_finalize(pStmt_by_@@fieldname@@_like);
________ END

________ TABLE_finalize_custom_get_query
    if (pStmt_get_@@customname@@)
        sqlite3_finalize(pStmt_get_@@customname@@);
________ END

________ TABLE_finalize_custom_upd
    if (pStmt_update_@@customname@@)
        sqlite3_finalize(pStmt_update_@@customname@@);
________ END

________ TABLE_finalize_custom_del
    if (pStmt_del_@@customname@@)
        sqlite3_finalize(pStmt_del_@@customname@@);
________ END

________ TABLE_get_column_pod
    got = sqlite3_column_type(pStmt, @@column_index@@);
    if (got != SQLITE_@@sqlite_type@@)
    {
        fprintf(stderr, "SQL_TABLE_@@tablename@@ :: get_columns "
                "(@@fieldname@@) : "
                "column @@column_index@@ wrong type (%d %d)\n",
                got, SQLITE_@@sqlite_type@@);
        return false;
    }
    @@fieldname@@ = @@sqlite_column_func@@(pStmt, @@column_index@@);
________ END

________ TABLE_get_column_string
    got = sqlite3_column_type(pStmt, @@column_index@@);
    if (got != SQLITE_@@sqlite_type@@)
    {
        fprintf(stderr, "SQL_TABLE_@@tablename@@ :: get_columns "
                "(@@fieldname@@) : "
                "column @@column_index@@ wrong type (%d %d)\n",
                got, SQLITE_@@sqlite_type@@);
        return false;
    }
    {
        const void * ptr = @@sqlite_column_func@@(
            pStmt, @@column_index@@);
        int len = sqlite3_column_bytes(pStmt, @@column_index@@);
        @@fieldname@@.resize(len);
        memcpy((void*)@@fieldname@@.c_str(), ptr, len);
    }
________ END

________ TABLE_query_implementation
bool SQL_TABLE_@@tablename@@ :: get_by_@@fieldname@@(@@fieldtype@@ v)
{
    int r;
    bool ret = false;

    if (pStmt_by_@@fieldname@@ == NULL)
    {
        r = sqlite3_prepare_v2(
            pdb,
            "SELECT rowid,* FROM @@tablename@@ WHERE @@fieldname@@ = ?",
            -1, &pStmt_by_@@fieldname@@, NULL);
        if (r != SQLITE_OK)
            printf("ERROR building SELECT for @@fieldname@@ at line %d\n",
                   __LINE__);
    }

    sqlite3_reset(pStmt_by_@@fieldname@@);

@@query_bind@@

    if (debug)
    {
        char * sql = sqlite3_expanded_sql(pStmt_by_@@fieldname@@);
        printf("SELECT get_by_@@fieldname@@: %s\n", sql);
        sqlite3_free(sql);
    }

    r = sqlite3_step(pStmt_by_@@fieldname@@);
    if (r == SQLITE_ROW)
    {
        ret = get_columns(pStmt_by_@@fieldname@@);
        previous_get = pStmt_by_@@fieldname@@;
    }
    else if (r == SQLITE_DONE)
        previous_get = NULL;

    return ret;
}
________ END

________ TABLE_query_bind_pod
    r = @@sqlite_bind_func@@(pStmt_by_@@fieldname@@, 1, v);
    if (r != SQLITE_OK)
    {
        fprintf(stderr, "SQL_TABLE_@@tablename@@ :: get_by_@@fieldname@@ "
                ": bind: r = %d\n", r);
        return false;
    }
________ END

________ TABLE_query_bind_string
    r = @@sqlite_bind_func@@(pStmt_by_isbn, 1,
         v.c_str(), v.length(),
         SQLITE_STATIC);
    if (r != SQLITE_OK)
    {
        fprintf(stderr, "SQL_TABLE_@@tablename@@ :: get_by_@@fieldname@@ "
                ": bind: r = %d\n", r);
        return false;
    }
________ END

________ TABLE_query_like_implementation
bool SQL_TABLE_@@tablename@@ :: get_by_@@fieldname@@_like(
    const std::string &patt)
{
    int r;
    bool ret = false;

    if(pStmt_by_@@fieldname@@_like == NULL)
    {
        r = sqlite3_prepare_v2(
            pdb,
            "SELECT rowid,* FROM @@tablename@@ WHERE @@fieldname@@ like ?",
            -1, &pStmt_by_@@fieldname@@_like, NULL);
        if (r != SQLITE_OK)
            printf("ERROR building SELECT LIKE for @@fieldname@@ at line %d\n",
                   __LINE__);
    }

    sqlite3_reset(pStmt_by_@@fieldname@@_like);

    r = @@sqlite_bind_func@@(pStmt_by_@@fieldname@@_like, 1,
         patt.c_str(), patt.length(),
         SQLITE_STATIC);
    if (r != SQLITE_OK)
    {
        fprintf(stderr, "SQL_TABLE_@@tablename@@ :: "
                "get_by_@@fieldname@@_like : bind: r = %d\n", r);
        return false;
    }

    if (debug)
    {
        char * sql = sqlite3_expanded_sql(pStmt_by_@@fieldname@@_like);
        printf("SELECT get_by_@@fieldname@@_like: %s\n", sql);
        sqlite3_free(sql);
    }

    r = sqlite3_step(pStmt_by_@@fieldname@@_like);
    if (r == SQLITE_ROW)
    {
        ret = get_columns(pStmt_by_@@fieldname@@_like);
        previous_get = pStmt_by_@@fieldname@@_like;
    }
    else if (r == SQLITE_DONE)
        previous_get = NULL;

    return ret;
}
________ END

________ TABLE_insert_binder_pod
    r = @@sqlite_bind_func@@(pStmt_insert, @@column_index@@, @@fieldname@@);
    if (r != SQLITE_OK)
    {
        fprintf(stderr, "SQL_TABLE_@@tablename@@ :: insert: "
                "bind @@fieldname@@: r = %d\n", r);
    }
________ END

________ TABLE_insert_binder_string
    r = @@sqlite_bind_func@@(pStmt_insert, @@column_index@@,
         @@fieldname@@.c_str(), @@fieldname@@.length(),
         SQLITE_STATIC);
    if (r != SQLITE_OK)
    {
        fprintf(stderr, "SQL_TABLE_@@tablename@@ :: insert: "
                "bind @@fieldname@@: r = %d\n", r);
    }
________ END

________ TABLE_custom_get_implementation
bool SQL_TABLE_@@tablename@@ :: get_@@customname@@(@@type_and_vX@@)
{
    int r;
    bool ret = false;

    if(pStmt_get_@@customname@@ == NULL)
    {
        r = sqlite3_prepare_v2(
            pdb,
            "SELECT rowid,* FROM @@tablename@@ WHERE @@querystring@@",
            -1, &pStmt_get_@@customname@@, NULL);
        if (r != SQLITE_OK)
            printf("ERROR building SELECT for "
                   "CUSTOM-GET @@customname@@ at line %d\n", __LINE__);
    }

    sqlite3_reset(pStmt_get_@@customname@@);

@@custom_get_binders@@

    if (debug)
    {
        char * sql = sqlite3_expanded_sql(pStmt_get_@@customname@@);
        printf("SELECT get_@@customname@@: %s\n", sql);
        sqlite3_free(sql);
    }

    r = sqlite3_step(pStmt_get_@@customname@@);
    if (r == SQLITE_ROW)
    {
        ret = get_columns(pStmt_get_@@customname@@);
        previous_get = pStmt_get_@@customname@@;
    }
    else if (r == SQLITE_DONE)
        previous_get = NULL;

    return ret;
}
________ END

________ TABLE_custom_get_binder_pod
    r = @@sqlite_bind_func@@(pStmt_get_@@customname@@,
                             @@arg_index@@, v@@arg_index@@);
    if (r != SQLITE_OK)
    {
        fprintf(stderr, 
                "SQL_TABLE_@@tablename@@ :: get_@@customname@@ "\
                ": bind: r = %d\n", r);
        return false;
    }
________ END

________ TABLE_custom_get_binder_string
    r = @@sqlite_bind_func@@(pStmt_get_@@customname@@, @@arg_index@@, 
                          v@@arg_index@@.c_str(), v@@arg_index@@.length(),
                          SQLITE_STATIC);
    if (r != SQLITE_OK)
    {
        fprintf(stderr, 
                "SQL_TABLE_@@tablename@@ :: get_@@customname@@ : "
                "bind: r = %d\n", r);
        return false;
    }
________ END

________ TABLE_custom_upd_implementation
bool SQL_TABLE_@@tablename@@ :: update_@@customname@@(void)
{
    int r;
    bool ret = false;

    if(pStmt_update_@@customname@@ == NULL)
    {
        r = sqlite3_prepare_v2(
            pdb,
            "UPDATE @@tablename@@ SET (@@custom_fieldlist@@) = "
            "(@@custom_questionmarks@@) where rowid = ?",
            -1, &pStmt_update_@@customname@@, NULL);
        if (r != SQLITE_OK)
            printf("ERROR building CUSTOM-UPD "
                   "@@customname@@ at line %d\n", __LINE__);
    }

    sqlite3_reset(pStmt_update_@@customname@@);

@@custom_update_binders@@

    r = sqlite3_bind_int64(pStmt_update_@@customname@@,
                           @@fieldindex@@, rowid);

    if (debug)
    {
        char * sql = sqlite3_expanded_sql(pStmt_update_@@customname@@);
        printf("UPDATE update_@@customname@@: %s\n", sql);
        sqlite3_free(sql);
    }

    r = sqlite3_step(pStmt_update_@@customname@@);
    if (r != SQLITE_DONE)
    {
        fprintf(stderr, "SQL_TABLE_@@tablename@@ :: update "
                "@@customname@@: r = %d\n", r);
        return false;
    }
    previous_get = NULL;

    return ret;
}
________ END

________ TABLE_custom_upd_binder_pod
    r = @@sqlite_bind_func@@(pStmt_update_@@customname@@,
                             @@fieldindex@@, @@fieldname@@);
    if (r != SQLITE_OK)
    {
        fprintf(stderr, "SQL_TABLE_@@tablename@@ :: "
                "update_@@customname@@: bind @@fieldname@@: r = %d\n", r);
    }
________ END

________ TABLE_custom_upd_binder_string
    r = @@sqlite_bind_func@@(pStmt_update_@@customname@@, @@fieldindex@@, 
         @@fieldname@@.c_str(), @@fieldname@@.length(),
         SQLITE_STATIC);
    if (r != SQLITE_OK)
    {
        fprintf(stderr, "SQL_TABLE_@@tablename@@ :: "
                "update_@@customname@@: bind @@fieldname@@: r = %d\n", r);
    }
________ END

________ TABLE_custom_del_implementation
bool SQL_TABLE_@@tablename@@ :: delete_@@customname@@(@@type_and_vX@@)
{
    int r;
    bool ret = false;

    if(pStmt_del_@@customname@@ == NULL)
    {
        r = sqlite3_prepare_v2(
            pdb,
            "DELETE FROM @@tablename@@ WHERE @@querystring@@",
            -1, &pStmt_del_@@customname@@, NULL);
        if (r != SQLITE_OK)
            printf("ERROR building DELETE for "
                   "CUSTOM-DEL @@customname@@ at line %d\n", __LINE__);
    }

    sqlite3_reset(pStmt_del_@@customname@@);

@@custom_del_binders@@

    if (debug)
    {
        char * sql = sqlite3_expanded_sql(pStmt_del_@@customname@@);
        printf("DELETE delete_@@customname@@: %s\n", sql);
        sqlite3_free(sql);
    }

    r = sqlite3_step(pStmt_del_@@customname@@);
    if (r == SQLITE_ROW)
    {
        ret = get_columns(pStmt_del_@@customname@@);
        previous_get = pStmt_del_@@customname@@;
    }
    else if (r == SQLITE_DONE)
        previous_get = NULL;

    return ret;
}
________ END

________ TABLE_custom_del_binder_pod
    r = @@sqlite_bind_func@@(pStmt_del_@@customname@@,
                             @@arg_index@@, v@@arg_index@@);
    if (r != SQLITE_OK)
    {
        fprintf(stderr,
                "SQL_TABLE_@@tablename@@ :: delete_@@customname@@ "\
                ": bind: r = %d\n", r);
        return false;
    }
________ END

________ TABLE_custom_del_binder_string
    r = @@sqlite_bind_func@@(pStmt_del_@@customname@@, @@arg_index@@,
                          v@@arg_index@@.c_str(), v@@arg_index@@.length(),
                          SQLITE_STATIC);
    if (r != SQLITE_OK)
    {
        fprintf(stderr,
                "SQL_TABLE_@@tablename@@ :: delete_@@customname@@ : "
                "bind: r = %d\n", r);
        return false;
    }
________ END

________ TABLE_create_index
    sqlite3_exec(pdb,"CREATE INDEX @@tablename@@_@@fieldname@@ "
                 "ON @@tablename@@ (@@fieldname@@)",
        NULL, NULL, NULL);
________ END

________ CLASS_ALL_TABELS_IMPL

bool SQL_TABLE_ALL_TABLES :: table_create_all(sqlite3 *pdb)
{
@@create_all_tables@@
    return true;
}
________ END

________ CLASS_ALL_TABLES_create_a_table
    if (!SQL_TABLE_@@tablename@@::table_create(pdb))
        return false;
________ END
