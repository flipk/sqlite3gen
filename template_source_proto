/* -*- Mode:c++; eval:(c-set-style "BSD"); c-basic-offset:4; indent-tabs-mode:nil; tab-width:8 -*- */

________ TABLE_proto_copy_funcs
void
SQL_TABLE_@@tablename@@ :: copy_to_proto(
              @@package@@::TABLE_@@tablename@@_m &msg)
{
    msg.set_schema_version(TABLE_VERSION);
@@proto_copy_to@@
}

void
SQL_TABLE_@@tablename@@ :: copy_from_proto(
              const @@package@@::TABLE_@@tablename@@_m &msg)
{
    init();
@@proto_copy_init_subtables@@
    merge_from_proto(msg);
}

// returns true if something changed requiring an update;
// returns false if nothing changed during the merge.
bool
SQL_TABLE_@@tablename@@ :: merge_from_proto(
              const @@package@@::TABLE_@@tablename@@_m &msg)
{
    bool modified = false;
    if (msg.has_schema_version() && msg.schema_version() != TABLE_VERSION)
    {
        // NOTE : if this becomes a problem in the future, we could
        //        enhance sql3gen to allow the user to register a
        //        callback function which can convert a message from
        //        one schema version to another.
        std::ostringstream err;
        err << "SQL_TABLE_@@tablename@@ :: "
            << "copy_from_proto : recvd protobuf message with "
            << "schema version " << msg.schema_version()
            << " (supported is " << TABLE_VERSION
            << ")\n";
        if (err_log_func)
            err_log_func(log_arg, err.str());
        else
            std::cerr << err.str();
    }
@@proto_merge_from@@
    return modified;
}
________ END

________ TABLE_proto_copy_to_field
    msg.set_@@fieldname_lower@@(@@fieldname@@);
________ END

________ TABLE_proto_copy_to_field_bool
    msg.set_@@fieldname_lower@@(@@fieldname@@ ? true : false);
________ END

________ TABLE_proto_copy_to_field_enum
    if (!@@fieldtype@@_IsValid(@@fieldname@@))
    @@initial_value@@
    msg.set_@@fieldname_lower@@(@@fieldname@@);
________ END

________ TABLE_proto_copy_from_field
    if (msg.has_@@fieldname_lower@@())
    {
        if (@@fieldname@@ != msg.@@fieldname_lower@@())
            modified = true;
        @@fieldname@@ = msg.@@fieldname_lower@@();
    }
________ END

________ TABLE_proto_copy_from_field_bool
    if (msg.has_@@fieldname_lower@@())
    {
        bool newval = msg.@@fieldname_lower@@() ? true : false;
        if (@@fieldname@@ != newval)
            modified = true;
        @@fieldname@@ = newval;
    }
________ END

________ TABLE_proto_copy_to_subtable
    msg.clear_@@fieldname_lower@@();
    for (size_t ind = 0; ind < @@fieldname@@.size(); ind++)
        @@fieldname@@[ind].copy_to_proto(*msg.add_@@fieldname_lower@@());
________ END

________ TABLE_proto_copy_init_subtable
    @@fieldname@@.clear();
________ END

________ TABLE_proto_copy_from_subtable
    @@fieldname@@.resize(msg.@@fieldname_lower@@_size());
    for (int ind = 0; ind < msg.@@fieldname_lower@@_size(); ind++)
    {
        @@fieldname@@[ind].set_db(pdb);
        if (@@fieldname@@[ind].merge_from_proto(
                msg.@@fieldname_lower@@(ind)))
            modified = true;
    }
________ END
