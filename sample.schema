
# this is a comment.

PACKAGE "library"

%PROTOTOP{
import "sample2.proto";
// proto top line 2
%}

%HEADERTOP{
/* header top line 1 */
/* header top line 2 */
%}

%SOURCETOP{
/* source top line 1 */
/* source top line 2 */
%}

TABLE user VERSION 19
{
    # NOTE PROTOID 1 is reserved for schema_version
    userid    INT   INDEX QUERY AUTOINCR "PRIMARY KEY" PROTOID 2 DEFAULT -1
    firstname TEXT                                     PROTOID 3 DEFAULT ""
    lastname  TEXT    LIKEQUERY                        PROTOID 4 DEFAULT ""
    mi        TEXT                                     PROTOID 5 DEFAULT ""
    SSN       INT     INDEX QUERY                      PROTOID 6 DEFAULT 0
    balance   DOUBLE                                   PROTOID 7 DEFAULT 0
    proto     BLOB                                     PROTOID 8
    test2     BOOL          QUERY                      PROTOID 9 DEFAULT 0
# NOTE: in order to test INCLUDE_SQLITE3GEN_PROTOBUF_SUPPORT,
#       you need to comment out all test3 stuff in this file.
    test3     ENUM sample.library2.EnumField_t QUERY   PROTOID 10
    	      DEFAULT sample.library2.ENUM_TWO

    SUBTABLE checkouts                                 PROTOID 11

    CONSTRAINT "user_constraint1 UNIQUE (firstname, lastname)"
    CONSTRAINT "user_constraint2 UNIQUE (mi, SSN)"

    CUSTOM-GET great_balance (DOUBLE) "balance > ?"
    CUSTOM-GET founders      ()       "userid < 100"
    CUSTOM-GET firstlast  (TEXT TEXT) "firstname LIKE ? AND lastname LIKE ?"

    CUSTOM-UPD balance   (balance)
    CUSTOM-UPD firstlast (firstname lastname)
    CUSTOM-UPDBY   userid_stuff   (proto test2 test3 balance)
                   (INT TEXT) "userid = ? and lastname = ?"

    CUSTOM-DEL SSN (INT)  "ssn = ?"
}

TABLE book VERSION 1
{
    # NOTE PROTOID 1 is reserved for schema_version
    bookid    INT    INDEX   QUERY AUTOINCR "PRIMARY KEY" PROTOID 2
    title     TEXT   LIKEQUERY                            PROTOID 3
    isbn      TEXT   INDEX   QUERY                        PROTOID 4
    price     DOUBLE                                      PROTOID 5
    quantity  INT                                         PROTOID 6

    CUSTOM-GET out_of_stock ()  "quantity == 0"

    CUSTOM-UPD quantity (quantity)
    CUSTOM-UPD price    (price)
}

TABLE checkouts VERSION 1
{
    # NOTE PROTOID 1 is reserved for schema_version
    bookid2         INT  INDEX QUERY  FOREIGN book.bookid PROTOID 2
    userid2         INT  INDEX QUERY  FOREIGN user.userid PROTOID 3
    duedate         INT64                                 PROTOID 4

    CUSTOM-GET due_now (INT64)  "duedate < ?"
}

# fun query:
#
#     select user.rowid as a,
#            checkouts.rowid as b,
#            checkouts.duedate
#       from user, checkouts, book
#      where user.userid = checkouts.userid2
#        and checkouts.bookid2 = book.bookid
#
# someday it would be nice to break up long strings across
# multiple lines, but for now the tokenizer doesn't recognize
# a TOK_STRING unless the open and close quotes are on the same line.

CUSTOM-SELECT due_books
   (user.rowid user.firstname user.lastname user.test2 user.test3
    book.rowid book.title
    checkouts.rowid checkouts.duedate)
  (user checkouts book)
  (INT INT)
  "checkouts.bookid2 = book.bookid AND checkouts.userid2 = user.userid AND book.bookid > ? AND book.bookid < ? ORDER BY duedate ASC"

CUSTOM-SELECT due_books2
   (user.rowid user.firstname user.lastname user.test2 user.test3
    book.rowid book.title
    checkouts.rowid checkouts.duedate)
  (INT INT)
   "FROM user, checkouts, book WHERE checkouts.bookid2 = book.bookid AND checkouts.userid2 = user.userid AND book.bookid > ? AND book.bookid < ? ORDER BY duedate ASC"

%PROTOBOTTOM{
// proto bottom line 1
// proto bottom line 2
%}

%HEADERBOTTOM{
/* header bottom line 1 */
/* header bottom line 2 */
%}

%SOURCEBOTTOM{
/* source bottom line 1 */
/* source bottom line 2 */
%}
