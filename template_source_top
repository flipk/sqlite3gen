/* -*- Mode:c++; eval:(c-set-style "BSD"); c-basic-offset:4; indent-tabs-mode:nil; tab-width:8 -*- */

________ SOURCE_TOP

///////////////////////////////////////////////////////////
// NOTE // NOTE // NOTE // NOTE // NOTE // NOTE // NOTE  //
//                                                       //
//       THIS FILE IS AUTOGENERATED BY sqlite3gen        //
// DO NOT EDIT THIS FILE, EDIT THE SOURCE AND REGENERATE //
//                                                       //
// NOTE // NOTE // NOTE // NOTE // NOTE // NOTE // NOTE  //
///////////////////////////////////////////////////////////

#include "@@headerfile@@"
#include <string.h>
#include <stdio.h>
#include <sstream>
#include <iostream>
#include <iomanip>

@@sourcetop_block@@

namespace @@package@@ {

#define PRINT_ERR(args...) SQL_TABLE_ALL_TABLES::print_err(\
        __PRETTY_FUNCTION__, __LINE__, args)

#define log_row_func SQL_TABLE_ALL_TABLES::log_row_func
#define log_get_func SQL_TABLE_ALL_TABLES::log_get_func
#define log_upd_func SQL_TABLE_ALL_TABLES::log_upd_func
#define err_log_func SQL_TABLE_ALL_TABLES::err_log_func
#define      log_arg SQL_TABLE_ALL_TABLES::log_arg

static void dflt_log_upd(void *arg, sqlite3_stmt *stmt)
{
    char * sql = sqlite3_expanded_sql(stmt);
    printf("SQL UPDATE: %s\n", sql);
    sqlite3_free(sql);
}

static void dflt_log_get(void *arg, sqlite3_stmt *stmt)
{
    char * sql = sqlite3_expanded_sql(stmt);
    printf("SQL GET: %s\n", sql);
    sqlite3_free(sql);
}

static void dflt_log_row(void *arg, const std::string &msg)
{
    printf("SQL ROW: %s\n", msg.c_str());
}

static void dflt_log_err(void *arg, const std::string &msg)
{
    printf("SQL ERROR: %s\n", msg.c_str());
}

static inline char nibble_to_hex(unsigned char nib)
{
    if (nib > 9)
        return nib - 10 + 'a';
    return nib + '0';
}

static void blob_to_hex(std::string &out, const std::string &in)
{
    out.clear();
    for (size_t ind = 0; ind < in.size(); ind++)
    {
        unsigned char c = (unsigned char) in[ind];
        out += nibble_to_hex((c >> 4) & 0xf);
        out += nibble_to_hex((c >> 0) & 0xf);
    }
}

static char hex_to_nibble(char c)
{
    if (c >= '0' && c <= '9')
        return c - '0';
    if (c >= 'a' && c <= 'f')
        return c - 'a' + 10;
    return 0xff;
}

static bool hex_to_blob(std::string &out, const std::string &in)
{
    if ((in.size() % 2) == 1)
        return false;

    out.clear();
    for (size_t ind = 0; ind < in.size(); ind += 2)
    {
        char l = hex_to_nibble(in[ind]);
        char r = hex_to_nibble(in[ind+1]);
        if (l == 0xff || r == 0xff)
            return false;
        char c = (l << 4) + r;
        out += c;
    }

    return true;
}

void _____dummy_blob_spacer(void)
{
    // this func exists only to eliminate 'defined but not used'
    // warnings on the above static funcs.
    std::string a,b;
    hex_to_blob(a,b);
    blob_to_hex(a,b);
}
________ END
