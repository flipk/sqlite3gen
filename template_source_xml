/* -*- Mode:c++; eval:(c-set-style "BSD"); c-basic-offset:4; indent-tabs-mode:nil; tab-width:8 -*- */

________ TABLE_xml_copy_funcs
void
SQL_TABLE_@@tablename@@ :: copy_to_xml(tinyxml2::XMLElement *el)
{
    el->SetValue("@@tablename@@");
    el->SetAttribute("type", "row");
    el->SetAttribute("rowid", (int64_t) rowid);

@@xml_copy_to@@
}

@@xml_decoder_functions@@

bool
SQL_TABLE_@@tablename@@ :: copy_from_xml(const tinyxml2::XMLElement *el)
{
    init();
    if (xml_decoders_initialized == false)
    {
@@xml_decoder_initializers@@
        xml_decoders_initialized = true;
    }
    if (strcmp(el->Value(), "@@tablename@@") != 0)
    {
        if (err_log_func)
        {
            std::ostringstream err;
            err << "SQL_TABLE_@@tablename@@ :: "
                << "copy_from_xml : node name is " << el->Value()
                << " not '@@tablename@@'!\n";
            err_log_func(log_arg, err.str().c_str());
        }
        return false;
    }
    const tinyxml2::XMLElement * child = el->FirstChildElement();
    while (child)
    {
        const char * v = child->Value();
        if (v && v[0] != 0)
        {
            xml_decoder_map_t::iterator it = xml_decoders.find(v);
            if (it != xml_decoders.end())
            {
                xml_decoder_func_t f = it->second;
                if ((this->*f)(child) == false)
                    return false;
            }
        }
        child = child->NextSiblingElement();
    }
    return true;
}
________ END

________ TABLE_xml_decoder_initializer
        xml_decoders["@@fieldname@@"] =
            &SQL_TABLE_@@tablename@@::xml_decoder_@@fieldname@@;
________ END

________ TABLE_copy_pod_to_xml
    {
        tinyxml2::XMLElement * child =
            el->GetDocument()->NewElement("@@fieldname@@");
        child->SetAttribute("type", "pod");
        el->InsertEndChild(child);
        std::ostringstream s;
        s << @@fieldname@@;
        tinyxml2::XMLText * v = el->GetDocument()->NewText(s.str().c_str());
        child->InsertEndChild(v);
    }
________ END

________ TABLE_copy_xml_to_pod
bool
SQL_TABLE_@@tablename@@ :: xml_decoder_@@fieldname@@(const tinyxml2::XMLElement *el)
{
    const tinyxml2::XMLNode * n = el->FirstChild();
    if (n)
    {
        const char * v = n->Value();
        if (v && v[0] != 0)
        {
            std::istringstream s(v);
            s >> @@fieldname@@;
            if (s.fail())
                return false;
            return true;
        }
    }
    return false;
}
________ END

________ TABLE_copy_string_to_xml
    {
        tinyxml2::XMLElement * child =
            el->GetDocument()->NewElement("@@fieldname@@");
        child->SetAttribute("type", "text");
        el->InsertEndChild(child);
        tinyxml2::XMLText * v =
            el->GetDocument()->NewText(@@fieldname@@.c_str());
        child->InsertEndChild(v);
    }
________ END

________ TABLE_copy_xml_to_string
bool
SQL_TABLE_@@tablename@@ :: xml_decoder_@@fieldname@@(const tinyxml2::XMLElement *el)
{
    const tinyxml2::XMLNode * n = el->FirstChild();
    @@fieldname@@ = "";
    if (n)
    {
        const char * v = n->Value();
        if (v)
            @@fieldname@@ = v;
    }
    return true;
}
________ END

________ TABLE_copy_blob_to_xml
    {
        tinyxml2::XMLElement * child =
            el->GetDocument()->NewElement("@@fieldname@@");
        child->SetAttribute("type", "blob");
        el->InsertEndChild(child);
        std::string hex;
        blob_to_hex(hex, @@fieldname@@);
        tinyxml2::XMLText * v =
            el->GetDocument()->NewText(hex.c_str());
        child->InsertEndChild(v);
    }
________ END

________ TABLE_copy_xml_to_blob
bool
SQL_TABLE_@@tablename@@ :: xml_decoder_@@fieldname@@(const tinyxml2::XMLElement *el)
{
    const tinyxml2::XMLNode * n = el->FirstChild();
    if (n)
    {
        const char * v = n->Value();
        if (v && v[0] != 0)
            hex_to_blob(@@fieldname@@, v);
        else
            @@fieldname@@ = "";
        return true;
    }
    return false;
}
________ END

________ TABLE_copy_bool_to_xml
    {
        tinyxml2::XMLElement * child =
            el->GetDocument()->NewElement("@@fieldname@@");
        child->SetAttribute("type", "bool");
        el->InsertEndChild(child);
        tinyxml2::XMLText * v =
            el->GetDocument()->NewText(@@fieldname@@ ? "true" : "false");
        child->InsertEndChild(v);
    }
________ END

________ TABLE_copy_xml_to_bool
bool
SQL_TABLE_@@tablename@@ :: xml_decoder_@@fieldname@@(const tinyxml2::XMLElement *el)
{
    const tinyxml2::XMLNode * n = el->FirstChild();
    if (n)
    {
        const char * v = n->Value();
        if (v && v[0] != 0)
        {
            if (strcmp(v, "true") == 0)
                @@fieldname@@ = true;
            else if (strcmp(v, "false") == 0)
                @@fieldname@@ = false;
            else
                return false;
        }
        return true;
    }
    return false;
}
________ END

________ TABLE_copy_enum_to_xml
    {
        tinyxml2::XMLElement * child =
            el->GetDocument()->NewElement("@@fieldname@@");
        child->SetAttribute("type", "@@fieldtype@@");
        el->InsertEndChild(child);
        tinyxml2::XMLText * v =
            el->GetDocument()->NewText(
                @@fieldtype@@_Name(@@fieldname@@).c_str());
        child->InsertEndChild(v);
    }
________ END

________ TABLE_copy_xml_to_enum
bool
SQL_TABLE_@@tablename@@ :: xml_decoder_@@fieldname@@(const tinyxml2::XMLElement *el)
{
    const tinyxml2::XMLNode * n = el->FirstChild();
    if (n)
    {
        const char * v = n->Value();
        if (v && v[0] != 0)
            return @@fieldtype@@_Parse(v, &@@fieldname@@);
        return true;
    }
    return false;
}
________ END

________ TABLE_copy_subtable_to_xml
    {
        tinyxml2::XMLElement * child =
            el->GetDocument()->NewElement("@@fieldname@@");
        child->SetAttribute("type", "subtable");
        el->InsertEndChild(child);
        for (size_t ind = 0; ind < @@fieldname@@.size(); ind++)
        {
            tinyxml2::XMLElement * child2 =
                el->GetDocument()->NewElement("@@fieldname@@");
            child2->SetAttribute("type", "subtable_row");
            child2->SetAttribute("index", (int) ind);
            child->InsertEndChild(child2);
            SQL_TABLE_@@fieldname@@ &f = @@fieldname@@[ind];
            f.copy_to_xml(child2);
        }
    }
________ END

________ TABLE_copy_xml_to_subtable
bool
SQL_TABLE_@@tablename@@ :: xml_decoder_@@fieldname@@(const tinyxml2::XMLElement *el)
{
    SQL_TABLE_@@fieldname@@  row(pdb);

    if (strcmp(el->Value(), "@@fieldname@@") != 0)
        return false;

    const tinyxml2::XMLElement *child = el->FirstChildElement();
    while (child)
    {
        if (row.copy_from_xml(child) == false)
            return false;
        @@fieldname@@.push_back(row);
        child = child->NextSiblingElement();
    }

    return true;
}
________ END

________ CLASS_ALL_TABLES_export_a_table
    if (/*is_subtable*/ @@is_subtable@@)
    {
        tinyxml2::XMLComment * c = doc.NewComment(
            "table @@tablename@@ is a subtable of another table");
        root->InsertEndChild(c);
    }
    else
    {
        tab = doc.NewElement("@@tablename@@");
        tab->SetAttribute("type", "table");
        tab->SetAttribute("version", @@tableversion@@);
        SQL_TABLE_@@tablename@@ :: export_xml(pdb, tab);
        root->InsertEndChild(tab);
    }
________ END

________ CLASS_ALL_TABLES_import_a_table
    if (strcmp(table_name, "@@tablename@@") == 0)
    {
        if (SQL_TABLE_@@tablename@@::import_xml(pdb,table) == false)
            return false;
    }
________ END
