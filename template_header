/* -*- Mode:c++; eval:(c-set-style "BSD"); c-basic-offset:4; indent-tabs-mode:nil; tab-width:8 -*- */

________ HEADER_TOP

///////////////////////////////////////////////////////////
// NOTE // NOTE // NOTE // NOTE // NOTE // NOTE // NOTE  //
//                                                       //
//       THIS FILE IS AUTOGENERATED BY sqlite3gen        //
// DO NOT EDIT THIS FILE, EDIT THE SOURCE AND REGENERATE //
//                                                       //
// NOTE // NOTE // NOTE // NOTE // NOTE // NOTE // NOTE  //
///////////////////////////////////////////////////////////

#include <inttypes.h>
#include <string>
#include <sstream>
#include "sqlite3.h"
@@protobuf_header@@

@@headertop_block@@

namespace @@package@@ {

typedef void (*sql_log_function_t)(void *arg, sqlite3_stmt *);
typedef void (*sql_err_function_t)(void *arg, const std::string &msg);
typedef void (*table_version_callback)(
    sqlite3 *pdb,
    const std::string &table_name,
    int version_in_file,
    int version_in_code);

________ END

________ TABLE_CLASS_DEFN

class SQL_TABLE_@@tablename@@ {
    sqlite3_stmt * pStmt_insert;
    sqlite3_stmt * pStmt_update;
    sqlite3_stmt * pStmt_delete_rowid;
    sqlite3_stmt * pStmt_get_by_rowid;
    sqlite3_stmt * pStmt_get_all;
@@stmt_by_decls@@
@@stmt_by_decls_like@@
@@stmt_custom_get_decls@@
@@stmt_custom_upd_decls@@
@@stmt_custom_del_decls@@

protected:
    sqlite3 *pdb;
    sqlite3_stmt * previous_get;
    bool get_columns(sqlite3_stmt *pStmt);
    static sql_log_function_t log_upd_func;
    static sql_log_function_t log_get_func;
    static void * log_arg;
    static sql_err_function_t err_log_func;
    static void * err_log_arg;
    static void print_err(const char *func, int lineno,
                          const char *format, ...);

public:
    SQL_TABLE_@@tablename@@(sqlite3 *_pdb = NULL);
    virtual ~SQL_TABLE_@@tablename@@(void);

    static const int TABLE_VERSION = @@tableversion@@;

    void init(void);
    void init_statements(void);
    void finalize(void);

    void set_db(sqlite3 *_pdb) {
        finalize();
        pdb = _pdb;
    }

    sqlite3_int64 rowid;

@@table_field_type_name_decls@@
@@table_query_method_protos@@
@@table_query_like_method_protos@@
@@table_custom_get_method_protos@@
    bool get_next(void);
    bool insert(void); // updates rowid
    bool update(void);
    bool delete_rowid(void); // delete by rowid
    bool get_by_rowid(int64_t v1);
    bool get_all(void);
@@table_custom_upd_method_protos@@
@@table_custom_del_method_protos@@
@@table_proto_copy_protos@@

    static void register_log_funcs(sql_log_function_t _upd_func,
                                   sql_log_function_t _get_func,
                                   void *_arg,
                                   sql_err_function_t _err_func,
                                   void *_err_arg)
    {
        log_upd_func = _upd_func;
        log_get_func = _get_func;
        log_arg  = _arg;
        err_log_func = _err_func;
        err_log_arg = _err_arg;
    }
    static bool init(sqlite3 *pdb, table_version_callback cb);
    static bool table_create(sqlite3 *pdb);
    static void table_drop(sqlite3 *pdb);
};

________ END

________ TABLE_CLASS_stmt_by_decl
    sqlite3_stmt * pStmt_by_@@fieldname@@;
________ END

________ TABLE_CLASS_stmt_by_decl_like
    sqlite3_stmt * pStmt_by_@@fieldname@@_like;
________ END

________ TABLE_CLASS_stmt_custom_get_decl
    sqlite3_stmt * pStmt_get_@@customname@@;
________ END

________ TABLE_CLASS_stmt_custom_upd_decl
    sqlite3_stmt * pStmt_update_@@customname@@;
________ END

________ TABLE_CLASS_stmt_custom_updby_decl
    sqlite3_stmt * pStmt_update_by_@@customname@@;
________ END

________ TABLE_CLASS_stmt_custom_del_decl
    sqlite3_stmt * pStmt_del_@@customname@@;
________ END

________ TABLE_CLASS_table_field_type_name_decls
    @@fieldtype@@ @@fieldname@@;
________ END

________ TABLE_CLASS_table_query_method_protos
    bool get_by_@@fieldname@@(@@fieldtype@@ v);
________ END

________ TABLE_CLASS_table_query_method_protos_like
    bool get_by_@@fieldname@@_like(const std::string &patt);
________ END

________ TABLE_CLASS_table_custom_get_method_protos
    bool get_@@customname@@(@@type_and_vX@@);
________ END

________ TABLE_CLASS_table_custom_upd_method_protos
    bool update_@@customname@@(void);
________ END

________ TABLE_CLASS_table_custom_updby_method_protos
    bool update_by_@@customname@@(@@type_and_vX@@);
________ END

________ TABLE_CLASS_table_custom_del_method_protos
    bool delete_@@customname@@(@@type_and_vX@@);
________ END

________ TABLE_CLASS_proto_copy_proto
    void CopyToProto(@@package@@::TABLE_@@tablename@@_m &msg);
    void CopyFromProto(const @@package@@::TABLE_@@tablename@@_m &msg);
________ END

________ CLASS_ALL_TABELS_DEFN

class SQL_TABLE_ALL_TABLES {
public:
    static bool init_all(sqlite3 *pdb, table_version_callback cb);
    static void table_drop_all(sqlite3 *pdb);
};

}; // namespace @@package@@

@@headerbottom_block@@

________ END
