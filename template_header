/* -*- Mode:c++; eval:(c-set-style "BSD"); c-basic-offset:4; indent-tabs-mode:nil; tab-width:8 -*- */

________ HEADER_TOP

///////////////////////////////////////////////////////////
// NOTE // NOTE // NOTE // NOTE // NOTE // NOTE // NOTE  //
//                                                       //
//       THIS FILE IS AUTOGENERATED BY sqlite3gen        //
// DO NOT EDIT THIS FILE, EDIT THE SOURCE AND REGENERATE //
//                                                       //
// NOTE // NOTE // NOTE // NOTE // NOTE // NOTE // NOTE  //
///////////////////////////////////////////////////////////

#include <inttypes.h>
#include <string>
#include <sstream>
#include <vector>
#include <map>
#include <sstream>
#include "sqlite3.h"

// OPTIONS enabled in this schema:
@@defines@@

#ifdef INCLUDE_SQLITE3GEN_TINYXML2_SUPPORT
#include "tinyxml2.h"
#endif
#ifdef INCLUDE_SQLITE3GEN_PROTOBUF_SUPPORT
@@protobuf_header@@
#endif

@@headertop_block@@

namespace @@package@@ {

typedef void (*sql_log_function_t)(void *arg, sqlite3_stmt *);
typedef void (*sql_row_function_t)(void *arg, const std::string &msg);
typedef void (*sql_err_function_t)(void *arg, const std::string &msg);
typedef void (*table_version_callback)(
    sqlite3 *pdb,
    const std::string &table_name,
    int version_in_file,
    int version_in_code);

@@class_forwards@@

enum SQLITE3GEN_Column_TypeDef
{
    // NOTE this must match TypeDef in sqlite3gen/parser.h
    TYPE_INT    = 1,
    TYPE_INT64  = 2,
    TYPE_TEXT   = 3,
    TYPE_BLOB   = 4,
    TYPE_DOUBLE = 5,
    TYPE_BOOL   = 6,
    TYPE_ENUM   = 7,
    TYPE_SUBTABLE = 8
};

struct SQL_Column_Descriptor
{
    std::string   tablename;
    std::string   fieldname;
    std::string   ctype;
    int           sqlite_type; // SQLITE_{INTEGER,FLOAT,BLOB,TEXT}
    SQLITE3GEN_Column_TypeDef  sqlite3gen_type;
};
________ END

________ TABLE_CLASS_DEFN

class SQL_TABLE_@@tablename@@ {
    sqlite3_stmt * pStmt_insert;
    sqlite3_stmt * pStmt_insert_force;
    sqlite3_stmt * pStmt_update;
    sqlite3_stmt * pStmt_delete_rowid;
    sqlite3_stmt * pStmt_get_by_rowid;
    sqlite3_stmt * pStmt_get_all;
@@stmt_by_decls@@
@@stmt_by_decls_like@@
@@stmt_custom_get_decls@@
@@stmt_custom_upd_decls@@
@@stmt_custom_del_decls@@

    void init_statements(void);
    void finalize(void);

protected:
    sqlite3 *pdb;
    sqlite3_stmt * previous_get;
    bool get_columns(sqlite3_stmt *pStmt);
    std::ostringstream log_row_msg;

#ifdef INCLUDE_SQLITE3GEN_TINYXML2_SUPPORT
    typedef bool (SQL_TABLE_@@tablename@@::*xml_decoder_func_t)
        (const tinyxml2::XMLElement *el);
    typedef std::map<std::string,xml_decoder_func_t> xml_decoder_map_t;
    xml_decoder_map_t xml_decoders;
    bool xml_decoders_initialized;

@@xml_decoder_protos@@
#endif

public:
    SQL_TABLE_@@tablename@@(sqlite3 *_pdb = NULL);
// copy constructor, sets all fields and pdb, but not stmts.
    SQL_TABLE_@@tablename@@(const SQL_TABLE_@@tablename@@ &other);
    void operator=(const SQL_TABLE_@@tablename@@ &other);
    virtual ~SQL_TABLE_@@tablename@@(void);

    static const int TABLE_VERSION = @@tableversion@@;
    static void get_column_descriptors(
        std::vector<SQL_Column_Descriptor> &columns);

// set all fields to default values
    void init(void);
// init pdb here, or set to NULL to finalize all stmts and release
    void set_db(sqlite3 *_pdb);

    sqlite3_int64 rowid;

@@table_field_type_name_decls@@
@@table_query_method_protos@@
    // get all subtables
    void get_subtables(void);
    void insert_subtables(void);
    void insert_subtables_force(void);
@@table_query_like_method_protos@@
@@table_custom_get_method_protos@@
    bool get_next(void);
// inserts, then modifies rowid to reflect the new rowid created.
// NOTE this skips a field if it is marked as AUTOINCR.
    bool insert(void);
// insert or update using all fields, even AUTOINCR fields.
    bool insert_force(void);
// update entire row, by rowid.
    bool update(void);
// delete, by rowid (rowid is only field consumed by this call)
    bool delete_rowid(void);
// WHERE rowid = ?
    bool get_by_rowid(int64_t v1);
// SELECT with no WHERE clause
    bool get_all(void);
@@table_custom_upd_method_protos@@
@@table_custom_del_method_protos@@
#ifdef INCLUDE_SQLITE3GEN_PROTOBUF_SUPPORT
@@table_proto_copy_protos@@
#endif
#ifdef INCLUDE_SQLITE3GEN_TINYXML2_SUPPORT
    void copy_to_xml(tinyxml2::XMLElement *el);
    bool copy_from_xml(const tinyxml2::XMLElement *el);
#endif
// create table and indexes if it doesn't exist, call callback if it does.
    static bool init(sqlite3 *pdb, table_version_callback cb);
// create table without checking if it exists.
    static bool table_create(sqlite3 *pdb);
// drop the table from the database.
    static void table_drop(sqlite3 *pdb);
#ifdef INCLUDE_SQLITE3GEN_TINYXML2_SUPPORT
    static void export_xml(sqlite3 *pdb, tinyxml2::XMLElement *el);
    static bool import_xml(sqlite3 *pdb, tinyxml2::XMLElement *el);
#endif
};

________ END

________ TABLE_CLASS_stmt_by_decl
    sqlite3_stmt * pStmt_by_@@fieldname@@;
________ END

________ TABLE_CLASS_stmt_by_decl_like
    sqlite3_stmt * pStmt_by_@@fieldname@@_like;
________ END

________ TABLE_CLASS_stmt_custom_get_decl
    sqlite3_stmt * pStmt_get_@@customname@@;
________ END

________ TABLE_CLASS_stmt_custom_upd_decl
    sqlite3_stmt * pStmt_update_@@customname@@;
________ END

________ TABLE_CLASS_stmt_custom_updby_decl
    sqlite3_stmt * pStmt_update_by_@@customname@@;
________ END

________ TABLE_CLASS_stmt_custom_del_decl
    sqlite3_stmt * pStmt_del_@@customname@@;
________ END

________ TABLE_CLASS_table_field_type_name_decls
    @@fieldtype@@ @@fieldname@@;
________ END

________ TABLE_CLASS_table_query_method_protos
    bool get_by_@@fieldname@@(@@fieldtype@@ v);
________ END

________ TABLE_CLASS_table_get_subtable_proto
// note this assumes foreign key @@foreign_key@@ is populated;
// returns number of rows fetched.
    int get_subtable_@@fieldname@@(void);
// true if ok, false if failure inserting (duplicate keys?)
    bool insert_subtable_@@fieldname@@(void);
    bool insert_subtable_@@fieldname@@_force(void);
________ END

________ TABLE_CLASS_table_query_method_protos_like
    bool get_by_@@fieldname@@_like(const std::string &patt);
________ END

________ TABLE_CLASS_table_custom_get_method_protos
    bool get_@@customname@@(@@type_and_vX@@);
________ END

________ TABLE_CLASS_table_custom_upd_method_protos
    bool update_@@customname@@(void);
________ END

________ TABLE_CLASS_table_custom_updby_method_protos
    bool update_by_@@customname@@(@@type_and_vX@@);
________ END

________ TABLE_CLASS_table_custom_del_method_protos
    bool delete_@@customname@@(@@type_and_vX@@);
________ END

________ TABLE_CLASS_proto_copy_proto
// NOTE these only copy SUBTABLEs if you have called the
//      get_subtable_* methods to populate them.
    void copy_to_proto(@@package@@::TABLE_@@tablename@@_m &msg);
    void copy_from_proto(const @@package@@::TABLE_@@tablename@@_m &msg);
________ END

________ TABLE_CLASS_xml_decoder_proto
    bool xml_decoder_@@fieldname@@(const tinyxml2::XMLElement *el);
________ END


________ QUERY_CLASS_DEFN
class SQL_SELECT_@@queryname@@ {
    sqlite3_stmt * pStmt_get_query;
    sqlite3 *pdb;
    bool get_columns(void);
    std::ostringstream log_row_msg;
public:
    SQL_SELECT_@@queryname@@(sqlite3 *_pdb = NULL);
    ~SQL_SELECT_@@queryname@@(void);
// init pdb here, or set to NULL to finalize stmt and release
    static void get_column_descriptors(
        std::vector<SQL_Column_Descriptor> &columns);
    void set_db(sqlite3 *_pdb);
// @@querybody@@
    bool get(@@queryargs@@);
    bool get_next(void);

@@queryfields@@
};
________ END

________ CLASS_ALL_TABELS_DEFN

class SQL_TABLE_ALL_TABLES {
public:
    static bool init_all(sqlite3 *pdb, table_version_callback cb);
    static void table_drop_all(sqlite3 *pdb);
    static void register_log_funcs(sql_log_function_t _upd_func,
                                   sql_log_function_t _get_func,
                                   sql_row_function_t _row_func,
                                   sql_err_function_t _err_func,
                                   void *_arg);
    static sql_log_function_t log_upd_func;
    static sql_log_function_t log_get_func;
    static sql_row_function_t log_row_func;
    static sql_err_function_t err_log_func;
    static void * log_arg;
    static void print_err(const char *func, int lineno,
                          const char *format, ...);
#ifdef INCLUDE_SQLITE3GEN_TINYXML2_SUPPORT
    static void export_xml_all(sqlite3 *pdb, tinyxml2::XMLDocument &doc);
    static bool import_xml_all(sqlite3 *pdb, tinyxml2::XMLDocument &doc);
#endif
};

class SQL_TRANSACTION {
    sqlite3 *pdb;
    bool commit_on_delete;
    bool started;
    bool finish(bool commit);
public:
    SQL_TRANSACTION(sqlite3 *_pdb = NULL,
                    bool _commit_on_delete = false);
    ~SQL_TRANSACTION(void);
    void set_db(sqlite3 *_pdb);
    // false return --> error (such as db ptr is null)
    bool begin(void);
    bool commit(void);
    bool rollback(void);
};

}; // namespace @@package@@

@@headerbottom_block@@

________ END

________ HEADER_define_xml
#define INCLUDE_SQLITE3GEN_TINYXML2_SUPPORT 1
________ END

________ HEADER_define_protobuf
#define INCLUDE_SQLITE3GEN_PROTOBUF_SUPPORT 1
________ END
