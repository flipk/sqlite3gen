/* -*- Mode:c++; eval:(c-set-style "BSD"); c-basic-offset:4; indent-tabs-mode:nil; tab-width:8 -*- */

________ TABLE_foreign_create_constraints
, FOREIGN KEY(@@fieldname@@) REFERENCES @@foreign_table@@(@@foreign_field@@)
________ ENDNL

________ TABLE_create_index
    errmsg = NULL;
    r = sqlite3_exec(pdb,"CREATE INDEX @@tablename@@_@@fieldname@@ "
                 "ON @@tablename@@ (@@fieldname@@)",
        NULL, NULL, &errmsg);
    printf("CREATE INDEX: CREATE INDEX @@tablename@@_@@fieldname@@ "
           "ON @@tablename@@ (@@fieldname@@)\n");
    if (r != SQLITE_OK)
    {
        e << "CREATE INDEX returned r = " << r
          << " error '" << errmsg << "'\n";
        printf("SQL ERROR: %s\n", e.str().c_str());
        if (errmsg != NULL)
            sqlite3_free(errmsg);
        if (err_log_func)
            err_log_func(log_arg, e.str());
        return false;
    }
________ END

________ CLASS_ALL_TABELS_IMPL

bool SQL_TABLE_ALL_TABLES :: init_all(sqlite3 *pdb, table_version_callback cb)
{
    sqlite3_stmt * s;
    sqlite3_prepare_v2(pdb,
        "select * from sqlite_master "
        "where name = \"tables\" and type = \"table\"",
        -1, &s, NULL);
    sqlite3_reset(s);
    int r = sqlite3_step(s);
    if (r == SQLITE_DONE)
    {
        // the table does NOT exist, create it
        sqlite3_exec(pdb,
                     "CREATE TABLE tables (name text, version int)",
                     NULL, NULL, NULL);
    }
    sqlite3_finalize(s);

@@create_all_tables@@

    return true;
}

void SQL_TABLE_ALL_TABLES :: table_drop_all(sqlite3 *pdb)
{
    if (pdb == NULL)
    {
        fprintf(stderr, "attempted DROP (all) with null db\n");
        return;
    }

@@drop_all_tables@@

    sqlite3_exec(pdb,
                 "DROP TABLE tables",
                 NULL, NULL, NULL);
}

sql_log_function_t SQL_TABLE_ALL_TABLES :: log_upd_func = &dflt_log_upd;
sql_log_function_t SQL_TABLE_ALL_TABLES :: log_get_func = &dflt_log_get;
sql_row_function_t SQL_TABLE_ALL_TABLES :: log_row_func = &dflt_log_row;
sql_err_function_t SQL_TABLE_ALL_TABLES :: err_log_func = &dflt_log_err;
void *             SQL_TABLE_ALL_TABLES :: log_arg      = NULL;

void SQL_TABLE_ALL_TABLES :: register_log_funcs(
    sql_log_function_t _upd_func,
    sql_log_function_t _get_func,
    sql_row_function_t _row_func,
    sql_err_function_t _err_func,
    void *_arg)
{
    log_upd_func = _upd_func;
    log_get_func = _get_func;
    log_row_func = _row_func;
    err_log_func = _err_func;
    log_arg = _arg;
}

//static
void
SQL_TABLE_ALL_TABLES :: print_err(const char *function, int lineno,
                                     const char *format, ...)
{
    if (err_log_func == NULL)
        // don't bother formatting the args.
        return;

    std::ostringstream msg_out;
    msg_out << function << ":" << lineno << ": ";
    std::string msg = msg_out.str();

    size_t offset = msg.size();
    msg.resize(offset + 250);

    va_list ap;
    va_start(ap, format);
    size_t l = vsnprintf((char*)msg.c_str() + offset,
                         250, format, ap);
    va_end(ap);
    // note that *snprintf returns what it WOULD have written
    // if there was space! so l > msg.size means it truncated.
    if (l < 250)
        msg.resize(l + offset);
    err_log_func(log_arg, msg);
}

#ifdef INCLUDE_SQLITE3GEN_TINYXML2_SUPPORT
//static
void SQL_TABLE_ALL_TABLES :: export_xml_all(sqlite3 *pdb,
                                            tinyxml2::XMLDocument &doc)
{
    doc.InsertEndChild(doc.NewDeclaration());
    tinyxml2::XMLElement * root = doc.NewElement("@@package@@");
    tinyxml2::XMLElement * tab = NULL;
    doc.InsertEndChild(root);
    struct tm export_time;
    time_t now = time(NULL);
    localtime_r(&now, &export_time);
    char export_time_str[100];
    strftime(export_time_str, 100, "%Y-%m%d-%H%M%S", &export_time);
    root->SetAttribute("export_time", export_time_str);
@@table_export_all@@
}

//static
bool SQL_TABLE_ALL_TABLES :: import_xml_all(sqlite3 *pdb,
                                            tinyxml2::XMLDocument &doc)
{
    tinyxml2::XMLElement * root = doc.RootElement();
    if (strcmp(root->Value(), "@@package@@") != 0)
    {
        fprintf(stderr, "ERROR: SQL_TABLE_ALL_TABLES :: import_xml_all : "
                "root element '%s' does not match package '%s'\n",
                root->Value(), "@@package@@");
        return false;
    }
    tinyxml2::XMLElement * table;
    for (table = root->FirstChildElement(); table;
         table = table->NextSiblingElement())
    {
        const char * table_name = table->Value();
@@table_import_all@@
    }
    return true;
}
#endif

SQL_TRANSACTION :: SQL_TRANSACTION(sqlite3 *_pdb /*= NULL*/,
                                   bool _commit_on_delete /*= false*/)
    : pdb(_pdb), commit_on_delete(_commit_on_delete), started(false)
{
}

SQL_TRANSACTION :: ~SQL_TRANSACTION(void)
{
    finish(commit_on_delete);
}

void
SQL_TRANSACTION :: set_db(sqlite3 *_pdb)
{
    finish(commit_on_delete);
    pdb = _pdb;
}

bool
SQL_TRANSACTION :: begin(void)
{
    if (pdb == NULL)
        return false;

    bool ret = false;
    char *msg = NULL;
    int r = sqlite3_exec(pdb, "BEGIN TRANSACTION", NULL, NULL, &msg);

    if (r != SQLITE_OK)
        PRINT_ERR("ERROR SQL_TRANSACTION BEGIN: %d (%s)\n",
                  r, msg);
    else
    {
        if (log_upd_func)
        {
            sqlite3_stmt * pStmt;
            sqlite3_prepare_v2(pdb, "BEGIN TRANSACTION",  -1, &pStmt, NULL);
            log_upd_func(log_arg, pStmt);
            sqlite3_finalize(pStmt);
        }
        ret = started = true;
    }

    if (msg)
        sqlite3_free(msg);

    return ret;
}

bool
SQL_TRANSACTION :: finish(bool commit)
{
    bool ret = false;
    if (pdb == NULL)
        return ret;
    char *msg = NULL;
    int r = 0;
    if (started)
    {
        if (commit)
        {
            r = sqlite3_exec(pdb, "COMMIT TRANSACTION", NULL, NULL, &msg);
            if (r != SQLITE_OK)
                PRINT_ERR("ERROR SQL_TRANSACTION COMMIT: %d (%s)\n",
                        r, msg);
            else
            {
                if (log_upd_func)
                {
                    sqlite3_stmt * pStmt;
                    sqlite3_prepare_v2(pdb, "COMMIT TRANSACTION",
                                       -1, &pStmt, NULL);
                    log_upd_func(log_arg, pStmt);
                    sqlite3_finalize(pStmt);
                }
                ret = true;
            }
        }
        else
        {
            r = sqlite3_exec(pdb, "ROLLBACK TRANSACTION", NULL, NULL, &msg);
            if (r != SQLITE_OK)
                PRINT_ERR("ERROR SQL_TRANSACTION ROLLBACK: %d (%s)\n",
                        r, msg);
            else
            {
                if (log_upd_func)
                {
                    sqlite3_stmt * pStmt;
                    sqlite3_prepare_v2(pdb, "ROLLBACK TRANSACTION",
                                       -1, &pStmt, NULL);
                    log_upd_func(log_arg, pStmt);
                    sqlite3_finalize(pStmt);
                }
                ret = true;
            }
        }
        started = false;
    }

    if (msg)
        sqlite3_free(msg);

    return ret;
}

bool
SQL_TRANSACTION :: commit(void)
{
    return finish(/*commit*/true);
}

bool
SQL_TRANSACTION :: rollback(void)
{
    return finish(/*commit*/false);
}

}; // namespace @@package@@

@@sourcebottom_block@@

________ END

________ CLASS_ALL_TABLES_create_a_table
    if (!SQL_TABLE_@@tablename@@::init(pdb, cb))
        return false;
________ END

________ CLASS_ALL_TABLES_drop_a_table
    SQL_TABLE_@@tablename@@::table_drop(pdb);
________ END
